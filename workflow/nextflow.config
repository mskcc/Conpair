def thisDirPath = new File(".").getCanonicalPath()

params {
    output_dir = "${thisDirPath}/output"
    markers_bed = "${thisDirPath}/data/markers/GRCh37.autosomes.phase3_shapeit2_mvncall_integrated.20130502.SNV.genotype.sselect_v4_MAF_0.4_LD_0.8.bed"
    markers_txt = "${thisDirPath}/data/markers/GRCh37.autosomes.phase3_shapeit2_mvncall_integrated.20130502.SNV.genotype.sselect_v4_MAF_0.4_LD_0.8.txt"
}

executor {
    name = "lsf" // run on the HPC with LSF
    }

report {
    enabled = true
}
timeline {
    enabled = true
}

trace {
    enabled = true
    fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes"
    raw = true
}


profiles {
    preprocessing {
        params {
            input_dir = "${thisDirPath}/bams"
            gatk_jar = "${thisDirPath}/gatk.jar"
            ref_fasta = "/juno/work/ci/resources/genomes/GRCh37/fasta/b37.fasta"
        }
        report.file = "preprocessing-report.html"
        timeline.file = "preprocessing-timeline.html"
        trace.file = "preprocessing-trace.txt"
        executor.queueSize = 300
        process {
            withName: pileup {
                time = 30.m
                memory = 12.GB
                maxForks = 250 // need to make sure some slots are still open for pileups to run in parallel
            }
            withName: likelihoods {
                time = 30.m
            }
        }
    }
    concordance {
        params {
            // files with lists of input files to use
            tumors_list = "tumors.txt"
            normals_list = "normals.txt"
        }
        report.file = "concordance-report.html"
        timeline.file = "concordance-timeline.html"
        trace.file = "concordance-trace.txt"

        process {
            withName: run_concordance {
                time = 60.m
                // memory = 12.GB
                cpus = 32
            }
        }
    }
}
